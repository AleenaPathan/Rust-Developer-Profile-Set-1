fn kth_smallest(nums: &[i32], k: usize) -> Option<i32> {
    if k <= 0 || k > nums.len() {
        return None; // Return None if k is out of bounds
    }
    
    let mut sorted_nums = nums.to_vec();
    sorted_nums.sort(); // Sort the array
    
    Some(sorted_nums[k - 1]) // Return the kth smallest element
}

fn main() {
    let nums = vec![3, 1, 4, 1, 5, 9, 2, 6, 5];
    let k = 4;
    match kth_smallest(&nums, k) {
        Some(kth) => println!("The {}th smallest element is: {}", k, kth),
        None => println!("Invalid input or k is out of bounds."),
    }
}
